Section 3.9 - Setting up a Simple Build Process with NPM Scripts:

--------------------------------------
Learning Outcome
--------------------------------------
> Create a simple build process npm script which compiles, concatenates, prefix and compresses our sass/css files into a single production code i.e. styles.css file that will be deployed on a production web server.


--------------------------------------
Build Process NPM Scripts
--------------------------------------
- We create NPM scripts within the package.json file.
   "scripts": {
      "watch:sass": "node-sass sass/main.scss css/style.css -w",
      "compile:sass": "node-sass sass/main.scss css/style.comp.css"
   },

- both scripts above will compile the sass files into our css file, however, one will watch for any changes to files and compile while the other will only compile the code when the script is run.
- Note: comp stands for compiled and so we can have two different CSS files created by the scripts.
- To run the script we would go in the terminal within the directory path that contains our project files (and the package.json file which has the sripts) and execute the following npm run command followed by the script name, for example:
   npm run watch:sass
   npm run compile:sass

- Each script are called tasks and we can have many different tasks. We can combine these different tasks to create a build process.
- The build process should not watch for any changes as it is used to create the final files from our project for production.

- We woiuld want a scripts created for the following tasks:
   1. Compiling sass file into css
   2. Concatenating css files
   3. Prefix
   4. Compress

- The concat package allows us to concatenate files. To install this into our project directory we would run the code and save it as a development dependency:
   npm install concat --save-dev
   https://www.npmjs.com/package/concat

   "scripts": {
      ...
      "concat:css": "concat -o css/style.concat.css css/icon-font css/style.comp.css"
   }
- This will concat the different css files into one single css file. This will help our website to make a single http request for the single css file rather than multiple files.

- The postcss-cli allows us to add prefix to our css files. The postcss-cli requires the autoprefix package in order to work. To install this into our project directory we would run the code and save it as a development dependency:
   npm install autoprfixer --save-dev
   npm install postcss-cli --save-dev

   "scripts": {
      ...
      "prefix:css": "postcss --use autoprefixer -b 'last 10 versions' css/style.concat.css -o css/style.prefix.css"
   }

- The autoprefixer package uses https://www.caniuse.com and so is always up-to-date with supporting most browser versions. The -b flag relates to the browsers and we can state which browsers we would want prefix support. The last 10 versions will ensure that we can support the older browser versions with the prefixes. This will use a css file and add the prefixes and then output the new file to our desired destination.
- This will add all the prefixes to newer css properties such as -webkit-transform etc. to ensure compatibility to all browser types.

- To compress our css file we do not require any npm packages to install. This is because our node-sass package is able to compress our files for us. We would use node-sass and state the input file/location and the output file/location.
   "scripts": {
      ...
      "compress:css": "node-sass css/style.prefix.css css/style.css --output-style compressed"
   }

- We can now have a build process script that will run all of these tasks one after another rather than us manually running each task script within the terminal.
- To ensure the build script will work on all operating system we can install a npm package called npm-run-all as a development dependency:
   npm install npm-run-all --dave-dev

   "scripts": {
      ...
      "build:css": "npm-run-all compile:sass concat:css prefix:css compress:css"
   }

- We use npm-run-all followed by the task names we want to run in order. We can now run this single command to run the various task which makes up our production build process.
   npm run build:css

--------------------------------------
Development Process NPM Scripts
--------------------------------------
- Having understood the above, we can create a development process which would compile and watch our sass/css files and also run live server.
- It is very common in the development community to call the script start which will run our processes.
- We can use the npm-run-all to create a development process.
   "scripts": {
      "watch:sass": "node-sass sass/main.scss css/style.css -w",
      "dev-server": "live-server",
      "start": "npm-run-all --parallel dev-server watch:sass",
   }

- The parallel option is required because it allows us to run the two tasks in parallel to each other i.e. running at the same time of each other rather one after the other in a sequence as seen in the build process.
   npm run start

- We have now created a script that we can now run one command to run both our development and build workflow.