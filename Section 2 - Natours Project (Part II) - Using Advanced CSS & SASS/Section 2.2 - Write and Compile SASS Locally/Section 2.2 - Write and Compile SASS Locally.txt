Section 2.2 Write and Compile SASS Locally:

--------------------------------------
Learning Outcome
--------------------------------------
> How to write and compile SASS locally on our machines
> Automatically reload of index.html following changes to our css code

--------------------------------------
Create and Write SCSS
--------------------------------------
- We should create a folder within our project directory that will contain our SASS files. This folder can be called 'sass'. We can use the MacOS terminal command within the project directory to create the folder:
   mkdir sass

- Within this folder we can create our sass file. These files have a extension of .sass or .scss depending on the syntax style of SASS we are going to use within our project. We can use the MacOS terminal command to create a new sass/scss file (note the cd command should be used to change to the desired directory/folder to create the file in):
   touch main.scss

- The scss/sass uses the same syntax as regular CSS but we can utilise other features such as variables,mixins, functions, etc. which is provided by the SASS CSS preprocessor.
- We can now move all of our CSS codes into the new scss file as all valid CSS code is valid SASS/SCSS code and will continue to work as normal.
- To add comments we can use the double forward slash (//) to indicate comments within our code.
- To create a variable we use the dollar ($) sign followed by the variable name. The value after the colon (:) becomes the variable value. Below is a example of storing a colour value to a variable:
   $colour-primary: #55c57a;
- To use our variable we simply call on the variable name:
   rgba($colour-primary, 0.8);


--------------------------------------
Compile SCSS
--------------------------------------
- In our package.json file we installed the node-sass package as a dependency to our project. We now need to create a script within our package.json file that will compile our scss code into regular css code.
- We would update the package.json file with the following script:
   "scripts": {
      "compile:sass": "node-sass sass/main.scss css/style.css -w"
   }
- Using node-sass we can specify the input file and the output file. This is similar to using the node-sass command in the terminal (provided we installed the node-sass globally on our machine). We can now call on the script from our package.json file.
- To run this script to compile our scss into css code, within the terminal within our project directory we would use the command:
   npm run compile:sass
- Adding the -w flag will watch our file for any changes and will recompile our sass/scss code into css code for us automatically every time we save our sass/scss file.
- We cannot close the terminal that is running this process, otherwise the auto-compile will not continue to work. 
- To end the script from running we would within the terminal use the keyboard buttons ctrl + c to end the script from running. We can now use the terminal to run another command or close the terminal.
- On MacOS we can use the keyboard keys within the terminal cmd + t to open another terminal tab. We can use multiple terminals at the same time. This allows us to have one terminal to continue to run one script while the other can be used for running other commands at the same time.


--------------------------------------
Automatic Reload of HTML Page
--------------------------------------
- Within VS Code we can install an extension called live-server. This extension allows us to open our project index.html file in our browser on localhost:5500 (or whichever port the localhost is running on). This extension will reload our page whenever there is a change to our project files automatically.
- Alternatively, we can install the live-server using npm locally within our project directory running the following command in the terminal:
   npm install live-server --save-dev
- If we use the -g flag this will save it globally within the machine and the package can be used on any packages. It is advisable to always download packages locally rather than globally.
- In the terminal we can run the live-server command within the home folder of our application which will open the index.html file in the default browser on localhost:8080
- We could create a script within our package.json file which will allow us to call on the script using the npm run command.
- The simplest method is to use the live-server extension within VS Code which will allow us to run live-server from within our code-editor on a selected file (typically the index.html which is the root file of all applications).
- We now have a real HTTP server running our project within the browser. This server will need to be kept running in the background (the same as our SASS compiler script). Any change detected will automatically reload our browser for us displaying the new changes in our code.