Section 2.5 Building a Custom Grid with Floats:

--------------------------------------
Learning Outcome
--------------------------------------
> How to architect and build a simple float grid system
> How the attribute selector works
> How the :not pseudo-class works
> How calc() works and what is the difference between calc() and simple SASS operations

Important Note: this project will be built using the Float Layout Type.


--------------------------------------
What is a Grid System
--------------------------------------
- A grid is design system which allows us to build consistent user interfaces.
- This allows us to divide our available spaces into parts such as: 
   [ 1/2 ] [ 1/2 ]                     equal parts 
   [ 1/3 ] [ 1/3 ] [ 1/3 ]             equal parts
   [ 1/3 ] [     2/3     ]             parts 
   [ 1/4 ] [ 1/4 ] [ 1/4 ] [ 1/4 ]     equal parts
   [ 1/4 ] [ 1/4 ] [     2/4     ]     parts
   etc.

- Within the grid system there are consistent gutters between the grid content.
- Many modern websites/webapps use the grid system.
- The columns are always in a container and the container is what we call a row.


--------------------------------------
Creating a Float Grid System
--------------------------------------
- Below is the HTML mark-up to demonstrate the float grid:

2 Equal Column Float Grid:
   <div class="row">
      <div class="col-1-of-2">
         Col 1 of 2
      </div>
      <div class="col-1-of-2">
         Col 2 of 2
      </div>
   </div>

3 Equal Column Float Grid:
   <div class="row">
      <div class="col-1-of-3">
         Col 1 of 3
      </div>
      <div class="col-1-of-3">
         Col 2 of 3
      </div>
      <div class="col-1-of-3">
         Col 3 of 3
      </div>
   </div>

3 Unequal Column Float Grid:
   <div class="row">
      <div class="col-1-of-3">
         Col 1 of 3
      </div>
      <div class="col-2-of-3">
         Col 2 to 3
      </div>
   </div>

- Below is the SASS/SCSS file that will style the column div:
   .row {
      max-width: 114rem;
      background-color: #eee;
      margin: 0 auto;
      
      &:not(:last-child) {
         margin-bottom: 8rem;
      }

      @include clearfix;

      [class^="col-"] {
         background-color: orangered;
         float: left;

         &:not(:last-child) {
            margin-right: $gutter-horizontal;
         }
      }

      .col-1-of-2 {
         width: calc((100% - #{$gutter-horizontal}) / 2);
      }

      .col-1-of-3 {
         width: calc((100% - 2 * #{$gutter-horizontal}) / 3);
      }

      .col-2-of-3 {
         width: calc(2* ((100% - 2 * #{$gutter-horizontal}) / 3));
      }
   }


--------------------------------------
The :not Pseudo Class
--------------------------------------
- With the .row class we need to define the max-width for the row. The standard used is to make the row 1140px grid (if using rems we would divide by 10 which will give 114rem).
- The margin: 0 auto trick helps align the content to the center of the screen.
- The :not pseudo class is really powerful and allows us to target all .rows that is not the last-child pseudo element. We can therefore target the margin-bottom property on all .row elements except for the last one.


--------------------------------------
The calc() Function
--------------------------------------
- The calc() function allows us to perform powerful mathematical calculations to calculate the width of the column which is the whole max-width of the .row container minus the gutter divided by the number of columns within the row. This will give the width of one of the columns.
- The calc() function allows us to mix units in our calculations which is a huge advantage.
- To use the variable within our calc() function we must wrap it using the hash and curly brackets (#{}).

Float-Grid Calculation for the Width:
- If a single gutter the calculation will be:
   width: calc((100% - #{$gutter-horizontal}) / 2);

- If multiple gutters the calculation will be (substitute n for the total number of gutters):
   width: calc((100% - n * #{$gutter-horizontal}) / 2);

- If we want to make one of the columns to span across two or more columns, the calculation would be to find the size of one column multiply by the number of columns we want to span across plus any gutters. Examples below:
   width: calc(2 * ((100% - 2 * #{$gutter-horizontal}) / 3) + #{$gutter-horizontal});
   width: calc(3 * ((100% - 2 * #{$gutter-horizontal}) / 4) + 2 * #{$gutter-horizontal});

- The spaces are important in CSS/SASS codes and we must add a space between the calculation operators.


--------------------------------------
Float and Clearfix
--------------------------------------
- We add a margin to the right on all the div columns except for the last child.
- Finally we use float: left property to float all the columns to the left side.
- When we float elements they lose their height property i.e. the height collapses and become 0px. We need to use the clear fix hack to correct the float heights.
- We would use our _mixins.scss to create the clear fix code which we can use within our other scss files. The clearfix mixin will append a pseudo element after the element which will then clear these floats.

   @mixin clearfix {
      &::after {
         content: "";
         display: table;
         clear: both;
      }
   }

- First we want to clear the content because we do not want to see the element on the page. We then want to display the clearfix and the way it is done is using table value (the standard version). Finally, we use the clear property to clear both left and right floats. This clearfix will work regardless if we have a left float or a right float.
- We ue the @include followed by the mixin name to use it within our other files.


--------------------------------------
Attribute Selector
--------------------------------------
- To use a attribute selector in SASS we use the square brackets ([]). We name the attribute that we wish to target such as the src, href, alt, etc. Below is an example of targeting all alt attributes of "Logo":
   [alt="Logo"] {}

- We can target a class attribute and using either the carrot (^) symbol to indicate the class must begin with the following, the asterisk (*) symbol to indicate the class must contain the following or the dollar ($) symbol to indicate the class must end with the following. 
- For example we can target all attributes with a class that begins with "col-":
   [Class^="col-"] {}

- We can therefore define the attributes for the selected attributes. This helps us to perform the DRY principal without using mixins or nesting (nesting will require a new class to all div elements).