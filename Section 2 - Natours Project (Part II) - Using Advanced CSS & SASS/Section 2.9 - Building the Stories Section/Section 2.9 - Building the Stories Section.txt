Section 2.9 Building the Stories Section:

--------------------------------------
Learning Outcome
--------------------------------------
> How to make text flow around shapes with shape-outside and float
> How to apply a filter to images
> How to create a background video covering an entire section
> How to use the <video> HTML element
> How and when to use the object-fit property


--------------------------------------
Text Flow with shape-outside and float
--------------------------------------
- Semantically, it is correct to create a <figure> html element because we are going to have an image together with a caption. In HTML5 we have this element to add the image with a <figcaption> element.
   <figure class="story__caption">
      <img src="" alt="">
      <figcaption">Caption</figcaption>
   </figure>

- Using the float property we can float the text around an object - for example floating the text to the left of the image.

HTML:
   <figure class="story__shape">
      <img src="" alt="">
      <figcaption">Caption</figcaption>
   </figure>
   <div class="story__caption">
      <h3>Heading Text</h3>
      <p>More Additional Text</p>
   </div>

SCSS:
   .story {
      ...

      &__shape {
         width: 15rem;
         height: 15rem;
         float: left;
         background-color: orangered;
         -webkit-shape-outside: circle(50% at 50% 50%);
         shape-outside: circle(50% at 50% 50%);

         -webkit-clip-path: circle(50% at 50% 50%);
         clip-path: circle(50% at 50% 50%);

         transform: translateX(-3rem);
      }
   }

- The shape-outside property allows us to float the text around a shape for example the outside of the circle.
- We need to define a vectorised shape for the text to wrap around. We can use a polygon, circle, ellipses etc. to create the vectorised shape as the value.
- The two values passed in circle() is the radius and the centre of the circle.
- 50% radius is half of the width and height of the element. In the above example this is half of 15rem.
- at 50% 50% means the center of the circle horizontally and vertically.
- In order for this to work the element must be floated and must have defined dimensions i.e. width and height.
- Using the clip-path we can make the shape a circle to finish off the effect of text wrapping around the circle image.
- The best way to move around an element that has been floated is by not actually messing with the margin or anything like that, but we should only use the transform: translate property.


--------------------------------------
Apply Filter to Images
--------------------------------------
- Filter is a CSS property that allows us to apply many different filters on our images for example blur, brightness, contrast, saturate, invert, etc.
- Numbers below 100% darkens an image while above 100% brightens the image using the brightness image filter.
   &:hover &__img {
      transform: translateX(-4rem) scale(1);
      filter: blur(3px) brightness(80%);
   }


--------------------------------------
Background Video & <video> HTML Element
--------------------------------------
- To create a background video, we would add an element that is the same size of the section it is going to cover and add the video to that <div> container. We always start with the HTML semantic first.
- In HTML5 there is a <video> element that we can embed a video. We use the <source> tag to embed the video link.
   <section class="section-stories">
      <div class="bg-video">
         <video class="bg-video__content" autoplay muted loop>
            <source src="img/video.mp4" type="video/mp4">
            <source src="img/video.webm" type="video/webm">
            Your browser is not supported!
         </video>
      </div>
   </section>

- We would specify the source and then the source type when using the <source> element.
- Below is a very useful free resource website to download cover videos:
   https://coverr.co/
- This website provides videos in both the mp4 and webm formats. We require both formats to ensure the video will work across all modern web browsers.
- The <source> attribute allows us to add more than one source which is useful for performance for devices and other screen sizes which in turn helps with users data plans on mobile phones.
- We also add a text to display in the event that the videos does not work on a clients browser (in the event the user are using a very old browser that does not support the video formats).
- We can specify commands for the video such as autoplay, muted, loop, etc.
- Autoplay is usually considered a bad thing to apply, but in this case since it is a background video and muted, it is not a problem or annoyance.
- We can create a new component scss file for the background video, in case we want to apply this component to more areas of the webpage. This will allow us to style the element to be a background video.
   .bg-video {
      position: absolute;
      top: 0;
      left: 0;
      height: 100%;
      width: 100%;
   }

- This will make the container position absolute and therefore we must make the parent element (i.e. the section holding the video) position relative.
   .section-stories {
      padding: 15rem 0;
      position: relative;
   }

--------------------------------------
How to Use the object-fit Property
--------------------------------------
- So far the background video is overflowing i.e. it is taking its entire width and not filling the entire section.
- Targeting the video__content, adding the height and width of 100% will not fix the issue alone as this would make the background video cover less of the section because it is maintaining the aspect ratio of the original video. 
- The object-fit property allows us to occupy the entire section but also maintain the aspect ratio.
- The object-fit is a new CSS property.
   .bg-video {
      ...
      overflow: hidden;

      &__content {
         height: 100%;
         width: 100%;
         object-fit: cover;
      }
   }

- This is similar to the background-size: cover property that we use for background-image. The object-fit property works with html elements where it fits the element within the parent element.
- There are other values that we can use such as fill, contain or cover. The fill and contain are not as useful compared to the cover as they lose the aspect ratio.
- We can use the overflow: hidden on the parent element to fix any overflowing of the child element.