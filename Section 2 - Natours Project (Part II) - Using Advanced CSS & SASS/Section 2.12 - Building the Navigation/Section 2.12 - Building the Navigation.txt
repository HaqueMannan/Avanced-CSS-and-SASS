Section 2.12 Building the Navigation:

--------------------------------------
Learning Outcome
--------------------------------------
> What the "checkbox hack" is and how it works
> How to create custom animation timing functions using cubic-bezier curves
> How to animate "solid-colour gradients"
> How and why to use transform-origin


--------------------------------------
The Checkbox Hack
--------------------------------------
- The checkbox hack allows us to create a navigation effect.
- The navigation button will remain in the same place no matter where we scroll to on our page. 
- When the button is clicked, the navigation will cover the whole page and when clicked again the navigation closes back into the button.
- This is all controlled by the checkbox hack which uses the same technique for the custom radio button but using the checkbox instead.
- Step 1: create a hidden checkbox input button.
- Step 2: create a label (which will act as the button) linked/connected to the checkbox.
- Step 3: reveal the navigation background when the checkbox becomes checked using the checked pseudo class in CSS to style the navigation.
- The navigation should be the first element within our entire web document which would be held in the <body> of our HTML document before the <header> element.

HTML
   <body>
      <div class="navigation">
         <input type="checkbox" class="navigation__checkbox" id="navi-toggle">

         <label for="navi-toggle" class="navigation__button">MENU</label>

         <div class="navigation__background">&nbsp;</div>

         <nav class="navigation__nav">
            <ul class="navigation__list">
               <li class="navigation__item"><a href="#" class="navigation__link">About Natours</a></li>
               <li class="navigation__item"><a href="#" class="navigation__link">Your Benefits</a></li>
               <li class="navigation__item"><a href="#" class="navigation__link">Popular Tours</a></li>
               <li class="navigation__item"><a href="#" class="navigation__link">Stories</a></li>
               <li class="navigation__item"><a href="#" class="navigation__link">Book Now</a></li>
            </ul>
         </nav>
      </div>
      ...
   </body>

- The html &nbsp; is used for a black space in HTML which allows us to have an empty background.
- We use the nav element as the container that will hold all our our navigation links in our unordered list so that we can style this whole element to cover the entire page when the navigation is toggled.


CSS:
.navigation {
   ...
   &__button {
      background-color: $colour-white;
      height: 7rem;
      width: 7rem;
      border-radius: 50%;
      position: fixed;
      top: 6rem;
      right: 6rem;
      z-index: 2000;
      box-shadow: 0 1rem 3rem rgba($colour-black, .1);
      text-align: center;
      cursor: pointer;
   }

   &__background {
      height: 6rem;
      width: 6rem;
      border-radius: 50%;
      position: fixed;
      top: 6.5rem;
      right: 6.5rem;
      background-image: radial-gradient($colour-primary-light, $colour-primary-dark);
      z-index: 1000;
      transition: transform .8s;
   }
   ...
}
- The position: fixed is the same as absolute but instead the element is fixed to the page and does not move when we scroll the page. It allows us to take the element out of the natural flow and allows us to specify it in relation to a positioned element using the top, left, right and bottom properties.
- We are positioning the background circle behind the button, as we can use the effect for the background to grow and cover the page when the button is clicked.
- Radial-gradient allows us to create a circular gradient starting from the middle out in comparison to the linear gradient which goes from one side to another.
- The z-index allows us to place this above all elements by using a high number. This property only works on elements which has its position defined.
- The button element is slightly larger than the background to initially cover the background. When the button is clicked we can animate it to grow to cover the whole page.
- The background is 6.5rem for top and right properties in order for it to sit centre behind the button.
- The z-index for the button should be higher in order for it to sit above the background.

   &__checkbox {
      display: none;
   }
- The display none property will hide the checkbox because we would not want to see the checkbox on our page, hence the checkbox hack for our navigation.

   &__nav {
      height: 100vh;
      position: fixed;
      top: 0;
      right: 0;
      z-index: 1500;

      opacity: 0;
      width: 0;
      transition: all .8s;
   }
- We use the <nav> element which will be a huge element occupying the entire viewport so that we can then centre the navigation list both horizontally and vertically.
- The <nav> element is a block level element and will automatically occupy 100% of its whole width and so it is not necessary to specify the width of this element but we can if we want to.
- Setting the opacity and width to 0 will hide the navigation elements. This will remove the navigation links from our page. We will use the checkbox hack to display them again.
- We use position fixed because even if we scroll the navigation should remain fixed on the page.
- The button should always be on top of everything but the nav elements should be on top of the background and therefore the z-index should be a value inbetween the other two values.

   &__list {
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      list-style: none;
      text-align: center;
      width: 100%;
   }

   &__item {
      margin: 1rem;
   }

   &__link {
      &:link,
      &:visited {
         display: inline-block;
         font-size: 3rem;
         font-weight: 300;
         padding: 1rem 2rem;
         color: $colour-white;
         text-decoration: none;
         text-transform: uppercase;
         background-image: linear-gradient(120deg, transparent 0%, transparent 49.9%, $colour-white 50%);
         background-size: 230%;
         transition: all .4s;
      }

      &:hover,
      &:active {
         background-position: 100%;
         color: $colour-primary;
         transform: translateX(1rem);
      }
   }
- These are the styles used to style the navigation link items and add transition animations on the hover active pseudo class state.

   &__checkbox:checked ~ &__background {
      transform: scale(80);
   }

   &__checkbox:checked ~ &__nav {
      opacity: 1;
      width: 100%
   }
- We first select the checkbox input item and use the :checked pseudo class to see if the checkbox is checked. We then use the sibling selector but we do not want the adjacent sibling because we are not targeting the direct sibling but we want to target the navigation__background sibling. Therefore, we would use the general sibling selector.
- We would transform the scale of the background image to cover the page.
- We would do the same for the navigation_nav to change the opacity and width to display the links.
- This will complete the checkbox hack to display the navigation when the checkbox is checked.
- We need the transition property on both parent elements to apply the animations.


--------------------------------------
Cubic-Bezier Curves
--------------------------------------
- There are a bunch of built-in timing functions such as ease-in, ease-out, ease-in-out, etc.
- We can build our own custom timing functions using the cubic-bezier function.
- In the cubic-bezier function, we need to pass in four numbers to define the cubic-bezier transition.
- We can use the following website to get the parameters needed for our desired timing transition effect.
   https://easings.net/en
   https://cubic-bezier.com/

Examples of cubic-bezier:
   transition: transform .8s cubic-bezier(0.86, 0, 0.07, 1);
   transition: all .8s cubic-bezier(0.68, -0.55, 0.265, 1.55);


--------------------------------------
Transform Origin
--------------------------------------
- To create the hamburger button which transforms from a 3 line to an X mark when the button is clicked and reverts back when clicked again, we can use the pseudo ::before and ::after elements for this effect.

HTML
   <label for="navi-toggle" class="navigation__button">
      <span class="navigation__icon">&nbsp;</span>
   </label>

CSS/SCSS
   &__icon {
      position: relative;
      margin-top : 3.5rem;

      &,
      &::before,
      &::after {
         width: 3rem;
         height: 2px;
         background-color: $colour-grey-dark-3;
         display: inline-block;
      }

      &::before,
      &::after {
         content: "";
         position: absolute;
         left: 0;
         transition: all .2s;
      }

      &::before { top: -.8rem; }
      &::after { top: .8rem; }
   }

   &__button:hover &__icon::before {
      top: -1rem;
   }

   &__button:hover &__icon::after {
      top: 1rem;
   }
- In order for the ::before and ::after pseudo elements to appear on the page we need to define their content and display property. To position the bars for these pseudo elements we would use position absolute for this.
- The text-align: centre on the navigation__button class will center the span element as it is considered a text element. We then apply margin-top to move the hamburger icon down.


   &__checkbox:checked + &__button &__icon {
      background-color: transparent;
   }

   &__checkbox:checked + &__button &__icon::before {
      top: 0;
      transform: rotate(135deg);
   }

   &__checkbox:checked + &__button &__icon::after {
      top: 0;
      transform: rotate(-135deg);
   }
- We use the + in the sibling selector because it is an adjacent sibling (we do not need ~ for the general sibling selector). So what we have done is select the brother/sister sibling of the checkbox which is called navigation__button and then we selected the navigation__button child which is navigation__icon.
- The ::before and ::after pseudo elements both relies on the size of the original element because they are positioned in relation to that size. If we remove the size property i.e. the width and the height of the element, we would then end up changing the position of the pseudo elements which we do not want to do. We change the background colour to transparent to hide the original span line rather than changing its size.
- This will create the transition from a Hamburger icon to an X icon on click of the button.

- An alternative method, we could also use the transform-origin which describes where the transformation happens. 
- For example if we transform-origin right, the element will remain in the exact same place but transform from the right side of the origin, in the above case this would be rotate from the right side (and left if we specified left).
- Sometimes when we want to rotate something, this can be really helpful in order to rotate exactly where we want it.
- If we do not specify the transform-origin, the transform will by default apply to the center of the element.