/* /////////////////////////////////////////////
RESPONSIVE LAYOUTS WITH AUTO-FIT AND AUTO-FILL
///////////////////////////////////////////// */
/* 
   - If we want the column to adapt to the number of items we have automatically, we can use the auto-fill property. For example: grid-template-columns: repeat(auto-fill, 100px); will create 10 column tracks (not 8) fitting in our 8 grid-items. This is because we specified 100px to be the column width and so 1000px / 100px = 10 columns.
   - The auto-fit property on the other hand would creates the 10 column tracks (same as the auto-fill); however, auto-fit collapses the 2 empty tracks and gives it a width of 0 which creates the extra space. Therefore, it is as if it only created the 8 column tracks.
   - We can combine the minmax function with the auto-fit unit so that the column tracks now occupy the entire grid-container's width i.e. filling the empty space that was left over by expanding the columns into more than 100px of width.
   - If we use a relative width for the grid-container e.g. 90% and apply the auto-fit and minmax grid-template-column e.g.grid-template-columns: repeat(auto-fit, minmax(100px, 1fr)). This allows us to have a truly dynamic grid whereby if the screen size decreases, the items will try to take their minimum width of 100px and should there be no space, the items will retain the minimum column-width but the grid-items will move onto the next line i.e. row. Therefore, the auto-fit will create the necessary columns to fit the content.
   - We can use the auto-fill and auto-fit properties to assign dynamic calculated column or row tracks without hardcoding the values, which allows for really responsive, flexible and adaptive layouts without the need for any media-queries.
*/

.container {
   background-color: #ddd;
   width: 1000px;
   margin: 30px auto;

   display: grid;
   grid-template-rows: repeat(2, minmax(150px, min-content));
   grid-template-columns: repeat(auto-fill, 100px);
   grid-template-columns: repeat(auto-fit, 100px);
   width: 90%;
   grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
   grid-auto-rows: 150px;        /* Style the height of auto-generated rows. */
}

.item {
   padding: 10px;
   font-size: 30px;
   font-family: sans-serif;
   color: white;
}

.item--1 {
   background-color: orangered;
}

.item--2 {
   background-color: yellowgreen;
}

.item--3 {
   background-color: blueviolet;
}

.item--4 {
   background-color: palevioletred;
}

.item--5 {
   background-color: royalblue;
}

.item--6 {
   background-color: goldenrod;
}

.item--7 {
   background-color: crimson;
}

.item--8 {
   background-color: darkslategray;
}