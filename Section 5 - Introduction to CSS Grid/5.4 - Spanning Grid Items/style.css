.container {
   background-color: #eee;
   width: 1000px;
   margin: 30px auto;
   /* height: 600px; */

   /* //////////////////////////
   CSS GRID CONTAINER
   ////////////////////////// */
   /* Create a 2 Rows, 3 Columns CSS Grid */
   display: grid;                                  /* Create a css grid container. */
   grid-template-rows: repeat(2, 150px);           /* Define the number of rows and their height. */
   /* grid-template-rows: repeat(2, 1fr);             Occupy the available space in fractional units. */
   /* grid-template-columns: repeat(3, 150px); */  /*  Define the number of columns and their width. */
   /* grid-template-columns: repeat(2, 150px) 300px; */
   /* grid-template-columns: repeat(2, 150px) 1frz; */
   grid-template-columns: repeat(3, 1fr);          /* Occupy the available space in fractional units. *?
   /* grid-template-columns: 1fr 2fr 1fr; */
   /* grid-template-columns: 1fr 3fr 1fr; */
   /* grid-template-columns: 1fr 3fr 3fr; */
   /* grid-template-columns: 50% 1fr 1fr; */

   /* 
      - In CSS Grid we have a concept of creating tracks for our rows and columns. So in the above we have a 2 row track and a 3 column track.

      - CSS Grid provides us with a new repeat() function which allows us to shorten our code when setting up our rows and columns. 
         // grid-template-rows: repeat(2, 150px);
         // grid-template-columns: repeat(3, 150px);

      - If we wanted one of our columns to be 300px, we would write the code like so:
         // grid-template-columns: repeat(2, 150px) 300px; 
   */

   /* 
      CSS Grid introduces a new fr (fractional) unit. This allows us to write our code so that the the grid-item will expand to all the that it can occupy (similar to flexbox). In the below example the last grid-item will occupy all of the remaining space.
         // grid-template-columns: repeat(2, 150px) 1fr;

      - If we want 3 column tracks but all grid-items occupying the available space, we would write the code like so:
         // grid-template-columns: repeat(3, 1fr);

      - We can take this even further and distribute the space between the grid-items with different values. The available space is divided by the number of fractions and then each fraction is assigned to the grid-item - for example we can divide the available space by 4 and assign the first and last grid-item 1:4 of the space and the middle grid-item 2:4 of the available space:
         // grid-template-columns: 1fr 2fr 1fr;

      - We can use all types of units and mix them together when defining the row or column tracks and percentages is no exception. 
      - The percentage value does not take into account the gutter/gap i.e. the 50% will take up half of the available width and the remaining space for the other grid-items will be calculate and distributed taking into account of the the gutter/gap.
         grid-template-columns: 50% 1fr 3fr;
      
      - The fr unit calculation also works on the overall height of the wrapper container.
   */


   /* //////////////////////////
   CSS GRID GUTTERS
   ////////////////////////// */
   grid-row-gap: 30px;                          /* Add grid gutters to the rows. */
   grid-column-gap: 50px;                       /* Add grid gutters to the columns. */
   grid-gap: 30px;                              /* Add grid gutter to both rows and columns. */
}


/* Global Styling for Grid Items */
.item {
   padding: 20px;
   font-size: 30px;
   font-family: sans-serif;
   color: white;
}

.item--1 {
   background-color: orangered;

   /* //////////////////////////
   POSITIONING 
   ////////////////////////// */

   /* grid-row-start: 2; */                     /* Position item in the cell that starts by row line 2. */
   /* grid-row-end: 3; */                       /* Position item in the cell that ends by row line 3. */
   grid-row: 2 / 3;                             /* Shorthand */
   /* grid-column-start: 2; */                  /* Position item in the cell that ends by column line 2. */
   /* grid-column-end: 3; */                    /* Position item in the cell that ends by column line 3. */
   grid-column: 2 / 3;                          /* Shorthand */
   grid-area: 2 / 2 / 3 / 3;                    /* Further Shorthand */

   /* 
      - Currently all grid-items are displayed/positioned according to their source order in the HTML. This is due to CSS Grid automatic placement algorithm.

      - A grid-cell is the area between two adjacent row and column line.

      - What if we wanted to move item--1 to the position of item--5's grid-cell? This is where the row and column line number come into play.

      - We define the start and end row line to position the item to move the item vertically. The below code will position the item on the second row which has a start line of 2 and an end line of 3. This is where the Mozilla Firefox devtools can really help with positioning items as we can display the line numbers.
         // grid-row-start: 2;
         // grid-row-end: 3;

      - Each other item will move up in the same order in which they were before using the automatic placement algorithm.

      - We define the start and end column line to position the item to move the item horizontally.
         // grid-column-start: 2;
         // grid-column-end: 3;

      - The shorthand for the above code:
         // grid-row: 2 / 3;
         // grid-column: 2 / 3;
      
      - Further shorthand for the above code. The first two values are where the row starts and column starts and the last two values is where the row ends and the column ends:
         // grid-area: 2 / 2 / 3 / 3;
   */

   z-index: 10;                                 /* Place item--1 on top of item--3. */
}
.item--2 {
   background-color: yellowgreen;

   /* //////////////////////////
   SPANNING GRID ITEM
   ////////////////////////// */
   /* grid-column: 1 / 3; */                    /* Start and End value has a difference > +1. */
   /* grid-column: 1 / span 3; */               /* Alternative using span keyword. */
   grid-column: 2 / -1;                         /* Alternative using -1 to span across to the end. */

   /* 
      - There are three methods to span across grid cells:
         1) Explicitly specify the end value
         2) Use the span keyword and specify the end value
         3) Use -1 as the end value, which will span across to the end.

      - The third method is useful as it can make our code dynamic as we do not need to hardcode the end value. This will automatically calculate and span the item to the end of the row or column using the -1 value regardless of the start value.
   */
}
.item--3 {
   background-color: blueviolet;

   /* //////////////////////////
   SPANNING GRID ITEM
   ////////////////////////// */
   /* grid-row: 1 / 3;
   grid-column: 1 / 2; */
   grid-row: 2 / 3;
   grid-column: 1 / 3;

   /* 
      - Using the grid-row and grid-column properties, we can make an item span across more grid-cells. Currently the start and end line numbers have a difference of 1. If we increase the end line number to make the difference higher than 1, the grid-item will span across to multiple grid-cells.

      - If we span items and end up with more items than we have space, then the css grid will create a new row line to fit the items. This is called an implicit grid.

      - If we implicitly span only the grid-column, this will move onto a new line because we have explicitly positioned item--1 to sit in the 5th grid cell.

      - If we explicitly set the row and column for item--3, this will span across the 4th and 5th grid-cell. However, item--3 will now also overlap item--1 (which is now hidden). This simply means that we can have multiple grid-items in the same cell (because we have explicitly defined the grid row and column properties of both items).

      - To make the item--1 sit on top of item--3, we can set the z-index on item--1 which will place it on top.
   */
}
.item--4 {
   background-color: palevioletred;
}
.item--5 {
   background-color: royalblue;

   /* //////////////////////////
   POSITIONING & SPANNING
   ////////////////////////// */
   /* grid-row: 1 / 2; */
   grid-row: 1 / 3;
   grid-column: 3 / 4;
   /* grid-area:  1 / 3 / 2 / 4; */
   /* grid-area:  1 / 3 / 3 / 4; */
}
.item--6 {
   background-color: goldenrod;

      /* //////////////////////////
   POSITIONING
   ////////////////////////// */
   /* grid-row: 1 / 2;
   grid-column: 2 / 3; */
   grid-area: 1 / 2 / 2 / 3;
}