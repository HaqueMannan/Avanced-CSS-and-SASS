/* /////////////////////////////////////////////
METHOD 1: GRID LINE NUMBERS
///////////////////////////////////////////// */
/* 
- We use the automatically generated grid line numbers to position our grid-items as demonstrated below:
*/

/* 
.container {
   background-color: #eee;
   width: 1000px;
   margin: 30px auto;

   display: grid;
   grid-template-rows: 100px 200px 400px 100px;
   grid-template-columns: repeat(3, 1fr) 200px;
   grid-gap: 30px;
}

.item {
   padding: 20px;
   font-size: 30px;
   font-family: sans-serif;
   background-color: orangered;
   color: white;
}

.item--header {
   grid-column: 1 / -1;
}

.item--main-content {
   grid-column: 1 / span 3;
}

.item--sidebar {
   grid-row: 2 / span 2;
   grid-column: 4 / 5;
   grid-column: 4 / -1;    // Alternative.
}

.item--footer {
   grid-column: 1 / -1;
}
*/


/* /////////////////////////////////////////////
METHOD 2: NAME GRID LINE
///////////////////////////////////////////// */
/* 
- We can name our grid lines manually using square brackets to name our lines and then the value outside the square bracket.
- We can give a line more than one name.
- The best practice is to describe the content that will be in track and specify if it is at the start or the at the end.
- When we have line names within a repeat function, then CSS Grid will create a set of grid lines for example repeat(3, [col-start] 1fr [col-end]) will create 3 sets of column with each column having a pair name of col-start # and col-end # --> each # is replaced by a number i.e. 1, 2 and 3.
- We can continue to use the span and -1 property values as we did with grid line numbers as normal.
- We can now start to use the grid line names to position our grid-items as demonstrated below:
*/

/*
.container {
   background-color: #eee;
   width: 1000px;
   margin: 30px auto;

   display: grid;
   grid-template-rows: [header-start] 100px [header-end box-start] 200px [box-end main-start] 400px [main-end footer-start] 100px [footer-end];
   grid-template-columns: repeat(3, [col-start] 1fr [col-end]) 200px [grid-end];
   grid-gap: 30px;
}

.item {
   padding: 20px;
   font-size: 30px;
   font-family: sans-serif;
   background-color: orangered;
   color: white;
}

.item--header {
   grid-column: col-start 1 / -1;
}

.item--main-content {
   grid-column: col-start 1 / span col-end 3;
}

.item--sidebar {
   grid-column: col-end 3 / grid-end;
   grid-row: box-start / main-end;
}

.item--footer {
   grid-column: col-start 1 / grid-end;
}
*/


/* /////////////////////////////////////////////
METHOD 3: NAME GRID AREA
///////////////////////////////////////////// */
/* 
- We can name our grid areas manually using the grid-template-area property.
- We use strings as values and we give each grid area a name. So in our example below we have a 4x4 grid, so we would give each (16 grid area) a name. 
- We would start naming by the first 4 grid areas which are the first 4 grid-items that goes across the columns on the first row (i.e. horizontally). We would then repeat for the next 4 items on row 2 and so on until all areas are named.
- We would try to use a short name so that it does not take too much space in the declaration and would also be easier to write our code (due to a lot of repetition) and call on these names for positioning of our items within the grid areas.
- The philosophy of the grid-template-area property is to assign text values that creates a text representation of how our final layout is going to look like.
- We need to ensure that we create a full representation of our layout i.e. all grid areas must be named else this property will not work.
- We can add empty cells within our text representation by adding a dot(.) to indicate an empty cell.
- We would now use the grid-area property to position our grid-items. The grid-area usually takes in the column-start, row-start, column-end and row-end numbers as values, however, we can now start to use the grid area names to position our grid-items as demonstrated below:
*/

.container {
   background-color: #eee;
   width: 1000px;
   margin: 30px auto;

   display: grid;
   grid-template-rows: 100px 200px 400px 100px;
   grid-template-columns: repeat(3, 1fr) 200px;
   grid-gap: 30px;

   grid-template-areas: "head head head head"
                        "box box box side"
                        "main main main side"
                        "foot foot foot foot";

   /* Alternative Template Area (Using Empty Grid-Areas): */
   grid-template-areas: ". head head ."
                        "box-1 box-2 box-3 side"
                        "main main main side"
                        "foot foot foot foot";
}

.item {
   padding: 20px;
   font-size: 30px;
   font-family: sans-serif;
   background-color: orangered;
   color: white;
}

.item--header {
   grid-area: head;
}

.item--small-box-1 {
   grid-area: box-1;
}

.item--small-box-2 {
   grid-area: box-2;
}

.item--small-box-3 {
   grid-area: box-3;
}

.item--main-content {
   grid-area: main;
}

.item--sidebar {
   grid-area: side;
}

.item--footer {
   grid-area: foot;
}