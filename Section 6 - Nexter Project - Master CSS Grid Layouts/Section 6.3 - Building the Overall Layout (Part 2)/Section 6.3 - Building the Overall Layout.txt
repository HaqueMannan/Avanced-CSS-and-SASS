Section 6.3 - Building the Overall Layout:

--------------------------------------
Learning Outcome
--------------------------------------
> How to build a complex and modern layout using advanced CSS Grid techniques
> How to choose different row and column track sizes for different types of content


--------------------------------------
Modern Layout Using Advanced CSS Grid
--------------------------------------
- It is always easy to know the layout of the overall web-page before coding it. This allows us to ensure that we have the correct columns and rows for our CSS Grid properties.
- It is important to always think about the responsiveness of the web page from the beginning when we define our grid tracks. We should be thinking about when the page increases and decreases and what we would want to occur to our sections and choose the grid accordingly.
- The class "container" will act as the overall container for our CSS Grid.
- We start by adding the display property to grid.
- We would then define the grid-template-column and grid-template-rows properties to setup the grid-tracks.
- Below is an example code of a responsive grid-track:
   .container {
      display: grid;
      grid-template-rows: 80vh min-content 40vw repeat(3, min-content);
      grid-template-columns: repeat(8, 1fr);
   }

- In real life projects we are not only using pixel units but instead we are using real units that make sense for the content that we are adding into our grid. Therefore, units such as viewport height and width (vh, vw) are really important units to use in real world scenarios.
- We do not always use fixed positions for the height and width as we want our rows and columns to adapt to the content (especially in the rows).
- As a result we do not need to think about media-queries if we think responsiveness from the beginning as the CSS Grid allows for responsive designs.
- It is common in web design to use a design grid such as a 8, 12 or 16 pre-defined columns. For example Bootstrap uses a 12-column design grid and many other design systems work exactly the same way.
- The above grid-template-column code creates a 8-column grid. This will create 8 equally sized columns occupying the entire viewport.


--------------------------------------
Different Row and Column Track Sizes
--------------------------------------
- We usually use something between 1100 to 1200 pixels for the viewport width. Therefore, we would want to divide our columns by viewport width and convert the value into rem units e.g.
   1140px / 8 = 142.5 (rounded down to 140px).
   140px / 10px = 14rem
   grid-template-columns: repeat(8, 14rem);

- We can use the minmax() function to define the min-content and max-content width so that our column track size will adapt and change to the viewport size:
   grid-template-columns: 8rem repeat(8, minmax(min-content, 14rem));

- The above will ensure that the max-content will have a column width of 14rem (i.e. 140px) or lower, however, it can never be lower than the min-content (i.e. the minimum size that it should have in order to fit the content in there).
- We ca add a fixed sidebar element by adding a column before the repeat in our grid-template-columns.

- We can add names to our columns and rows. We would mainly add names to the columns only as we would only want to control our content through the columns. This allows us to then define the grid-column and grid-row property for each grid-items:
   .container {
      grid-template-columns: [sidebar-start] 8rem [sidebar-end full-start] minmax(6rem, 1fr) [center-start] repeat(8, [col-start] minmax(min-content, 12rem) [col-end]) [center-end] minmax(6rem, 1fr) [full-end];
   }

   .sidebar {
      grid-column: sidebar-start / sidebar-end;
      grid-row: 1 / -1;
   }

   .header {
      grid-column: full-start / col-end 6;
   }

- We can now use the track names to position our grid-items in the grid-areas we want. 
- Now that our grid has been created with responsiveness in mind, this will make it easier to build the rest of the web page. This will allow us to make very complex layout using the power of CSS Grid with less code.